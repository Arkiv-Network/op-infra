# TODO: just is not working as we depend on go.just
#
#
# import '../justfiles/go.just'
#
# Build ldflags string
# _LDFLAGSSTRING := "'" + trim(
#     "-X main.GitCommit=" + GITCOMMIT + " " + \
#     "-X main.GitDate=" + GITDATE + " " + \
#     "-X main.Version=" + VERSION + " " + \
#     "") + "'"

BINARY := "./bin/op-acceptor"

all: build

docker:
	docker build ../ -f Dockerfile -t op-acceptor:latest

# Build op-acceptor binary
# op-acceptor: (go_build BINARY "./cmd" "-ldflags" _LDFLAGSSTRING)
build:
    CGO_ENABLED=0 go build -o ./bin/op-acceptor ./cmd

# Clean build artifacts
clean:
    rm -f {{BINARY}}

# Run tests
# test: (go_test "./...")
test:
    CGO_ENABLED=0 go build ./... && go test -count=1 -v ./...

# Run prometheus and grafana
start-monitoring:
    docker compose -f 'docker-compose.yml' up -d --build

# Stop prometheus and grafana
stop-monitoring:
    docker compose -f 'docker-compose.yml' down

lint:
    #!/bin/bash
    # Run goimports with auto-fix (CI includes this but as a formatter, not linter)
    echo "Fixing goimports formatting..."
    if goimports -l . | grep -q .; then \
        echo " - Found goimports issues; fixing..."; \
        goimports -w .; \
    fi
    # Run golangci-lint matching CI config (excluding unsupported goimports linter and -e flags)
    echo "Running golangci-lint..."
    if [ -f .golangci.yml ]; then \
        golangci-lint run -c .golangci.yml -E sqlclosecheck,bodyclose,asciicheck,misspell,errorlint --timeout "5m0s" ./...; \
    else \
        golangci-lint run -E sqlclosecheck,bodyclose,asciicheck,misspell,errorlint --timeout "5m0s" ./...; \
    fi
